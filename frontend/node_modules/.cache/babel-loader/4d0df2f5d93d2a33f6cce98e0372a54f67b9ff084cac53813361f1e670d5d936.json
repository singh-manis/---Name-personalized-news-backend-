{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nexport function useNotifications() {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [loadingNotifications, setLoadingNotifications] = useState(true);\n  const fetchNotifications = useCallback(async () => {\n    try {\n      setLoadingNotifications(true);\n      const token = localStorage.getItem('token');\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/api/user/notifications`, {\n        headers: {\n          'x-auth-token': token\n        }\n      });\n      setNotifications(res.data);\n    } catch (err) {\n      toast.error('Failed to fetch notifications');\n    } finally {\n      setLoadingNotifications(false);\n    }\n  }, []);\n  const markAsRead = useCallback(async id => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post(`${process.env.REACT_APP_API_URL}/api/user/notifications/${id}/read`, {}, {\n        headers: {\n          'x-auth-token': token\n        }\n      });\n      setNotifications(prev => prev.map(n => n._id === id ? {\n        ...n,\n        read: true\n      } : n));\n    } catch (err) {\n      toast.error('Failed to mark notification as read');\n    }\n  }, []);\n  return {\n    notifications,\n    loadingNotifications,\n    fetchNotifications,\n    markAsRead,\n    setNotifications\n  };\n}\n_s(useNotifications, \"Xwjkc8J/3s+X9IihM9ZMsrqPiL4=\");","map":{"version":3,"names":["useState","useCallback","axios","toast","useNotifications","_s","notifications","setNotifications","loadingNotifications","setLoadingNotifications","fetchNotifications","token","localStorage","getItem","res","get","process","env","REACT_APP_API_URL","headers","data","err","error","markAsRead","id","post","prev","map","n","_id","read"],"sources":["C:/Users/Manish singh/Desktop/personalized-news/frontend/src/hooks/useNotifications.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport function useNotifications() {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loadingNotifications, setLoadingNotifications] = useState(true);\r\n\r\n  const fetchNotifications = useCallback(async () => {\r\n    try {\r\n      setLoadingNotifications(true);\r\n      const token = localStorage.getItem('token');\r\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/api/user/notifications`, {\r\n        headers: { 'x-auth-token': token }\r\n      });\r\n      setNotifications(res.data);\r\n    } catch (err) {\r\n      toast.error('Failed to fetch notifications');\r\n    } finally {\r\n      setLoadingNotifications(false);\r\n    }\r\n  }, []);\r\n\r\n  const markAsRead = useCallback(async (id) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.post(`${process.env.REACT_APP_API_URL}/api/user/notifications/${id}/read`, {}, {\r\n        headers: { 'x-auth-token': token }\r\n      });\r\n      setNotifications((prev) => prev.map(n => n._id === id ? { ...n, read: true } : n));\r\n    } catch (err) {\r\n      toast.error('Failed to mark notification as read');\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    notifications,\r\n    loadingNotifications,\r\n    fetchNotifications,\r\n    markAsRead,\r\n    setNotifications,\r\n  };\r\n} "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtE,MAAMU,kBAAkB,GAAGT,WAAW,CAAC,YAAY;IACjD,IAAI;MACFQ,uBAAuB,CAAC,IAAI,CAAC;MAC7B,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,yBAAyB,EAAE;QACrFC,OAAO,EAAE;UAAE,cAAc,EAAER;QAAM;MACnC,CAAC,CAAC;MACFJ,gBAAgB,CAACO,GAAG,CAACM,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZlB,KAAK,CAACmB,KAAK,CAAC,+BAA+B,CAAC;IAC9C,CAAC,SAAS;MACRb,uBAAuB,CAAC,KAAK,CAAC;IAChC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,UAAU,GAAGtB,WAAW,CAAC,MAAOuB,EAAE,IAAK;IAC3C,IAAI;MACF,MAAMb,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMX,KAAK,CAACuB,IAAI,CAAC,GAAGT,OAAO,CAACC,GAAG,CAACC,iBAAiB,2BAA2BM,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE;QACzFL,OAAO,EAAE;UAAE,cAAc,EAAER;QAAM;MACnC,CAAC,CAAC;MACFJ,gBAAgB,CAAEmB,IAAI,IAAKA,IAAI,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKL,EAAE,GAAG;QAAE,GAAGI,CAAC;QAAEE,IAAI,EAAE;MAAK,CAAC,GAAGF,CAAC,CAAC,CAAC;IACpF,CAAC,CAAC,OAAOP,GAAG,EAAE;MACZlB,KAAK,CAACmB,KAAK,CAAC,qCAAqC,CAAC;IACpD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLhB,aAAa;IACbE,oBAAoB;IACpBE,kBAAkB;IAClBa,UAAU;IACVhB;EACF,CAAC;AACH;AAACF,EAAA,CAtCeD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}