{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manish singh\\\\Desktop\\\\personalized-news\\\\frontend\\\\src\\\\utils\\\\performance.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Performance monitoring utilities\n\nexport const measurePerformance = (name, fn) => {\n  const start = performance.now();\n  const result = fn();\n  const end = performance.now();\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`⏱️ ${name} took ${(end - start).toFixed(2)}ms`);\n  }\n  return result;\n};\nexport const measureAsyncPerformance = async (name, fn) => {\n  const start = performance.now();\n  const result = await fn();\n  const end = performance.now();\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`⏱️ ${name} took ${(end - start).toFixed(2)}ms`);\n  }\n  return result;\n};\n\n// Web Vitals monitoring\nexport const trackWebVitals = () => {\n  if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n    // Track Largest Contentful Paint (LCP)\n    const lcpObserver = new PerformanceObserver(list => {\n      const entries = list.getEntries();\n      const lastEntry = entries[entries.length - 1];\n      console.log('LCP:', lastEntry.startTime);\n    });\n    lcpObserver.observe({\n      entryTypes: ['largest-contentful-paint']\n    });\n\n    // Track First Input Delay (FID)\n    const fidObserver = new PerformanceObserver(list => {\n      const entries = list.getEntries();\n      entries.forEach(entry => {\n        console.log('FID:', entry.processingStart - entry.startTime);\n      });\n    });\n    fidObserver.observe({\n      entryTypes: ['first-input']\n    });\n\n    // Track Cumulative Layout Shift (CLS)\n    let clsValue = 0;\n    const clsObserver = new PerformanceObserver(list => {\n      const entries = list.getEntries();\n      entries.forEach(entry => {\n        if (!entry.hadRecentInput) {\n          clsValue += entry.value;\n        }\n      });\n      console.log('CLS:', clsValue);\n    });\n    clsObserver.observe({\n      entryTypes: ['layout-shift']\n    });\n  }\n};\n\n// Memory usage monitoring\nexport const trackMemoryUsage = () => {\n  if ('memory' in performance) {\n    const memory = performance.memory;\n    console.log('Memory Usage:', {\n      used: `${(memory.usedJSHeapSize / 1048576).toFixed(2)} MB`,\n      total: `${(memory.totalJSHeapSize / 1048576).toFixed(2)} MB`,\n      limit: `${(memory.jsHeapSizeLimit / 1048576).toFixed(2)} MB`\n    });\n  }\n};\n\n// Component render time tracking\nexport const withPerformanceTracking = (WrappedComponent, componentName) => {\n  var _s = $RefreshSig$();\n  return _s(React.memo(_s(props => {\n    _s();\n    const startTime = performance.now();\n    useEffect(() => {\n      const endTime = performance.now();\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`🎭 ${componentName} rendered in ${(endTime - startTime).toFixed(2)}ms`);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n};","map":{"version":3,"names":["measurePerformance","name","fn","start","performance","now","result","end","process","env","NODE_ENV","console","log","toFixed","measureAsyncPerformance","trackWebVitals","window","lcpObserver","PerformanceObserver","list","entries","getEntries","lastEntry","length","startTime","observe","entryTypes","fidObserver","forEach","entry","processingStart","clsValue","clsObserver","hadRecentInput","value","trackMemoryUsage","memory","used","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","withPerformanceTracking","WrappedComponent","componentName","_s","$RefreshSig$","React","memo","props","useEffect","endTime","_jsxDEV","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Manish singh/Desktop/personalized-news/frontend/src/utils/performance.js"],"sourcesContent":["// Performance monitoring utilities\r\n\r\nexport const measurePerformance = (name, fn) => {\r\n  const start = performance.now();\r\n  const result = fn();\r\n  const end = performance.now();\r\n  \r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log(`⏱️ ${name} took ${(end - start).toFixed(2)}ms`);\r\n  }\r\n  \r\n  return result;\r\n};\r\n\r\nexport const measureAsyncPerformance = async (name, fn) => {\r\n  const start = performance.now();\r\n  const result = await fn();\r\n  const end = performance.now();\r\n  \r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log(`⏱️ ${name} took ${(end - start).toFixed(2)}ms`);\r\n  }\r\n  \r\n  return result;\r\n};\r\n\r\n// Web Vitals monitoring\r\nexport const trackWebVitals = () => {\r\n  if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\r\n    // Track Largest Contentful Paint (LCP)\r\n    const lcpObserver = new PerformanceObserver((list) => {\r\n      const entries = list.getEntries();\r\n      const lastEntry = entries[entries.length - 1];\r\n      console.log('LCP:', lastEntry.startTime);\r\n    });\r\n    lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\r\n\r\n    // Track First Input Delay (FID)\r\n    const fidObserver = new PerformanceObserver((list) => {\r\n      const entries = list.getEntries();\r\n      entries.forEach((entry) => {\r\n        console.log('FID:', entry.processingStart - entry.startTime);\r\n      });\r\n    });\r\n    fidObserver.observe({ entryTypes: ['first-input'] });\r\n\r\n    // Track Cumulative Layout Shift (CLS)\r\n    let clsValue = 0;\r\n    const clsObserver = new PerformanceObserver((list) => {\r\n      const entries = list.getEntries();\r\n      entries.forEach((entry) => {\r\n        if (!entry.hadRecentInput) {\r\n          clsValue += entry.value;\r\n        }\r\n      });\r\n      console.log('CLS:', clsValue);\r\n    });\r\n    clsObserver.observe({ entryTypes: ['layout-shift'] });\r\n  }\r\n};\r\n\r\n// Memory usage monitoring\r\nexport const trackMemoryUsage = () => {\r\n  if ('memory' in performance) {\r\n    const memory = performance.memory;\r\n    console.log('Memory Usage:', {\r\n      used: `${(memory.usedJSHeapSize / 1048576).toFixed(2)} MB`,\r\n      total: `${(memory.totalJSHeapSize / 1048576).toFixed(2)} MB`,\r\n      limit: `${(memory.jsHeapSizeLimit / 1048576).toFixed(2)} MB`\r\n    });\r\n  }\r\n};\r\n\r\n// Component render time tracking\r\nexport const withPerformanceTracking = (WrappedComponent, componentName) => {\r\n  return React.memo((props) => {\r\n    const startTime = performance.now();\r\n    \r\n    useEffect(() => {\r\n      const endTime = performance.now();\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log(`🎭 ${componentName} rendered in ${(endTime - startTime).toFixed(2)}ms`);\r\n      }\r\n    });\r\n    \r\n    return <WrappedComponent {...props} />;\r\n  });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}